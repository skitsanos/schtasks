/**
 * schtasks - Windows Task Scheduler wrapper
 * Enables an administrator to create, delete, query, change, run and
 * end scheduled tasks on a local or remote system.
 * @author Skitsanos (info@skitsanos.com)
 * @version 1.0 (9/25/13)
 */

String.prototype.trim = function ()
{
	var result = this.match(/^ *(.*?) *$/);
	return (result ? result[1] : this);
};
String.prototype.replaceAll = function (f, r)
{
	return this.replace(new RegExp(f, 'g'), r);
};
Array.prototype.getEven = function ()
{
	var arr = [];

	for (var i = 0; i < this.length; i++)
	{
		if (i % 2 === 1)
		{ // index is even
			arr.push(this[i]);
		}
	}

	return arr;
};
Array.prototype.getOdd = function ()
{
	var arr = [];

	for (var i = 0; i < this.length; i++)
	{
		if (i % 2 === 0)
		{ // index is odd
			arr.push(this[i]);
		}
	}

	return arr;
};
Array.prototype.cutBlanks = function ()
{
	var arr = [];

	for (var i = 0; i < this.length; i++)
	{
		if (this[i] != '' && this[i] != '\r\n')
		{
			arr.push(this[i]);
		}
	}

	return arr;
};

//http://stackoverflow.com/questions/396099/how-to-launch-windows-scheduler-by-command-line
var exec = require('child_process').exec;
var csv = require('csv');

var schtasks = function ()
{
	var _cmd = 'schtasks ';

	return {
		/**
		 * Enables an administrator to display the scheduled tasks on the local or remote system.
		 * @param handler
		 */
		query: function (handler)
		{
			var o = [];

			var cmdParams = ['/query', '/FO CSV'];
			exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
			{
				//console.log('stdout: ' + stdout);
				//console.log('stderr: ' + stderr);
				if (error !== null)
				{
					console.log('exec error: ' + error);
				}

				var csvContent = stdout.replaceAll('"TaskName","Next Run Time","Status"\r\n', '');
				csv().from.string(csvContent).to.array(function (data)
				{
					for (var i = 0; i < data.length; i++)
					{
						o.push({
							name: data[i][0],
							shortName: data[i][0].split('\\').pop(),
							nextRunTime: data[i][1],
							status: data[i][2]
						});
					}
					handler(o);
				});
			});
		},

		/**
		 * Shows the SID for the task's dedicated user
		 * @param name Specifies the scheduled task name. Dashes are not allowed in the name.
		 * @param handler
		 */
		showSid: function (name, handler)
		{
			var cmdParams = [' /ShowSid', '/TN "' + name + '"'];

			exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
			{
				var rex = new RegExp('SUCCESS: The SID "(.*?)"');
				var execResult = rex.exec(stdout);
				if (execResult == null)
				{
					handler({type: 'error', result: stdout});
				}
				else
				{
					handler({type: 'result', result: execResult[1]});
				}
			});
		},

		/**
		 * Enables an administrator to create scheduled tasks on a local or remote system.
		 * @param config
		 * @param handler
		 */
		create: function (config, handler)
		{
			var cmdParams = [];
			cmdParams.push(' /RU "SYSTEM"');
            cmdParams.push('/CREATE');
			var errorMessage = [];

			if (config.hasOwnProperty('taskname') && (config['taskname'].length > 0))
				cmdParams.push('/TN "' + config.taskname + '"');
			else
				errorMessage.push('taskname property is mandatory and is missing');

			if (config.hasOwnProperty('schedule') && (config['schedule'].length > 0))
				cmdParams.push('/SC "' + config.schedule.toUpperCase() + '"');
			else
				errorMessage.push('schedule property is mandatory and is missing');

			if (config.hasOwnProperty('recur') && (config['recur'] != undefined))
				cmdParams.push('/MO "' + config.recur + '"');
			else
				errorMessage.push('recur property is mandatory and is missing');

			if (config.hasOwnProperty('taskrun') && (config['taskrun'].length > 0))
				cmdParams.push('/TR \'' + config.taskrun + '\'');
			else
				errorMessage.push('taskrun property is mandatory and is missing');

			if (config.hasOwnProperty('starttime') && (config['starttime'].length > 0))
				cmdParams.push('/ST ' + config.starttime + '');

			if (config.hasOwnProperty('startdate') && (config['startdate'].length > 0))
				cmdParams.push('/SD ' + config.startdate + '');

			if (config.hasOwnProperty('enddate') && (config['enddate'].length > 0))
				cmdParams.push('/ED ' + config.enddate + '');

			if (config.hasOwnProperty('forcecreate'))
				cmdParams.push('/F');

			if (errorMessage.length > 0)
			{
				handler({type: 'error', result: errorMessage.join(' ')});
				return;
			}

			this.showSid(config['taskname'], function (o)
			{
				if ((o.type != 'error') && (!config.hasOwnProperty('forcecreate')))
				{
					errorMessage.push('Task - ' + config.taskname + ' already exists.');
					handler({type: 'error', result: errorMessage.join(' ')});
				} else
				{
					exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
					{
						if (error !== null)
						{
							handler({type: 'error', result: stderr});
						}
						else
						{
							if (stdout.indexOf('SUCCESS') == 0)
							{
								handler({type: 'result', result: stdout});
							}
							else
							{
								handler({type: 'error', result: stderr});
							}
						}
					});
				}
			});
		},

		change: function (config, handler)
		{
            var cmdParams = [];
            cmdParams.push(' /CHANGE');
            var errorMessage = [];

            if (config.hasOwnProperty('taskname') && (config['taskname'].length > 0))
                cmdParams.push('/TN "' + config.taskname + '"');
            else
                errorMessage.push('taskname property is mandatory and is missing');

            if (config.hasOwnProperty('taskrun') && (config['taskrun'].length > 0))
                cmdParams.push('/TR \'' + config.taskrun + '\'');

            if (config.hasOwnProperty('starttime') && (config['starttime'].length > 0))
                cmdParams.push('/ST ' + config.starttime + '');

            if (config.hasOwnProperty('startdate') && (config['startdate'].length > 0))
                cmdParams.push('/SD ' + config.startdate + '');

            if (config.hasOwnProperty('enddate') && (config['enddate'].length > 0))
                cmdParams.push('/ED ' + config.enddate + '');

            if (errorMessage.length > 0)
            {
                handler({type: 'error', result: errorMessage.join(' ')});
                return;
            }

            this.showSid(config['taskname'], function (o)
            {
                if (o.type != 'error')
                {
                    exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
                    {
                        if (error !== null)
                        {
                            handler({type: 'error', result: stderr});
                        }
                        else
                        {
                            if (stdout.indexOf('SUCCESS') == 0)
                            {
                                handler({type: 'result', result: stdout});
                            }
                            else
                            {
                                handler({type: 'error', result: stderr});
                            }
                        }
                    });
                } else
                {
                    errorMessage.push('Task - ' + config.taskname + ' does not exist.');
                    handler({type: 'error', result: errorMessage.join(' ')});
                }
            });

		},

		delete: function (name, handler)
		{
			var cmdParams = ['/delete', '/F', '/tn "' + name + '"'];

			exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
			{
				if (error !== null)
				{
					handler({type: 'error', result: stderr});
				}
				else
				{
					if (stdout.indexOf('SUCCESS') == 0)
					{
						handler({type: 'result', result: 'sucess'});
					}
					else
					{
						handler({type: 'error', result: stderr});
					}
				}
			});
		},
		/**
		 * Runs a scheduled task on demand.
		 * @param name Identifies the scheduled task to run now
		 * @param i Runs the task immediately by ignoring any constraint. Accepts true|false
		 * @param handler
		 */
		run: function (name, i, handler)
		{
			var cmdParams = ['/run', '/tn "' + name + '"'];
			if (i)
			{
				cmdParams.push('/I');//Runs the task immediately by ignoring any constraint.
			}

			exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
			{
				if (error !== null)
				{
					handler({type: 'error', result: stderr});
				}
				else
				{
					if (stdout.indexOf('SUCCESS') == 0)
					{
						handler({type: 'result', result: 'sucess'});
					}
					else
					{
						handler({type: 'error', result: stdout});
					}
				}
			});
		},

		end: function (name, handler)
		{
			var cmdParams = ['/end', '/tn "' + name + '"'];

			exec(_cmd + cmdParams.join(' '), function callback(error, stdout, stderr)
			{
				if (error !== null)
				{
					handler({type: 'error', result: stderr});
				}
				else
				{
					if (stdout.indexOf('SUCCESS') == 0)
					{
						handler({type: 'result', result: 'sucess'});
					}
					else
					{
						handler({type: 'error', result: stdout});
					}
				}
			});
		}
	};
};

module.exports = schtasks;